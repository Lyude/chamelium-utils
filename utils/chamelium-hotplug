#!/usr/bin/python3

import argparse
import urllib.parse
from tabulate import tabulate
from xmlrpc.client import ServerProxy

ALLOWED_CONNECTOR_TYPES = {
    'VGA',
    'HDMI',
    'DP',
}

def action_show():
    # headers = ["Port", "Type", "Physically plugged", "Plugged"]
    table = list()
    for port in chameleon.GetSupportedInputs():
        if chameleon.GetConnectorType(port) not in ALLOWED_CONNECTOR_TYPES:
            continue
        table.append([port,
                      chameleon.GetConnectorType(port),
                      str(chameleon.IsPhysicalPlugged(port)),
                      str(chameleon.IsPlugged(port))])

    # Aligned to the left to the length of the longest header + 3
    print(tabulate(table, headers=[
        "Port", "Type", "Physically plugged", "Plugged"]))

def action_plug():
    for port in args.ports:
        print("Plugging %d..." % port)
        chameleon.Plug(port)

def action_unplug():
    for port in args.ports:
        print("Unplugging %d..." % port)
        chameleon.Unplug(port)

def action_reset():
    print("Resetting chameleon...")
    chameleon.Reset()

def action_pulse():
    print("Firing %d HPD pulses on port %d, deassert interval=%dms, assert interval=%dms, end level=%s..." % (
        args.count, args.port, args.deassert_interval,
        args.assert_interval if args.assert_interval != None else args.deassert_interval,
        args.end_level))
    chameleon.FireHpdPulse(args.port, args.deassert_interval * 1000,
                           args.assert_interval, args.count,
                           0 if args.end_level == 'low' else 1)

def parse_chamelium_url(arg):
    try:
        urllib.parse.urlparse(arg)
    except Exception:
        raise argparse.ArgumentTypeError("'%s' is not a valid url" % arg)

    return arg

parser = argparse.ArgumentParser(
    description="A utility for controlling hotplugging on the chameleon",
)
parser.add_argument("chameleon_host",
                    help="The URL to the chameleond instance",
                    type=parse_chamelium_url)

subparsers = parser.add_subparsers()
parser_show = subparsers.add_parser('show',
                                    help='Show the status of each port on the Chameleon')
parser_show.set_defaults(func=action_show)

parser_plug = subparsers.add_parser('plug',
                                    help='Plug ports on the Chameleon into the DUT')
parser_plug.add_argument("ports", help="The ports to plug in", nargs='+',
                         type=int)
parser_plug.set_defaults(func=action_plug)

parser_unplug = subparsers.add_parser('unplug',
                                      help='Unplug ports on the Chameleon from the DUT')
parser_unplug.add_argument("ports", help="The ports to unplug", nargs='+',
                           type=int)
parser_unplug.set_defaults(func=action_unplug)

parser_reset = subparsers.add_parser('reset', help='Resets the Chameleon')
parser_reset.set_defaults(func=action_reset)

parser_pulse = subparsers.add_parser('pulse',
                                     help='Send multiple identical HPD pulses')
parser_pulse.set_defaults(func=action_pulse)
parser_pulse.add_argument('port', help='The port to send the pulses on',
                          type=int)
parser_pulse.add_argument('deassert_interval',
                          help='The time in ms of the deassert pulse', type=int)
parser_pulse.add_argument('-c', '--count',
                          help='How many HPD pulses to send', type=int,
                          default=1)
parser_pulse.add_argument('--assert-interval', type=int, default=None,
                          help='The time in ms of the assert pulse (defaults to the deassert interval)')
parser_pulse.add_argument('--end-level', type=str, choices=('high', 'low'),
                          default='high',
                          help='Whether to end with the hpd line as high or low (plugged or unplugged)')

args = parser.parse_args()
chameleon = ServerProxy(args.chameleon_host, allow_none=True,
                        use_builtin_types=True)

args.func()

# vim: ft=python :
